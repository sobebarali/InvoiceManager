version: 2.1
orbs:
  python: circleci/python@2.1.1

workflows:
  build-test-deploy:
    jobs:
      - build-and-test
      - deploy:
          requires:
            - build-and-test

jobs:
  build-and-test:
    docker:
      - image: cimg/python:3.10
      - image: circleci/postgres:13.3
        environment:
          POSTGRES_USER: postgres
          POSTGRES_DB: test_db
          POSTGRES_PASSWORD: postgres
          POSTGRES_HOST_AUTH_METHOD: trust
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "requirements.txt" }}
            - v1-dependencies-
      - run:
          name: Install dependencies
          command: |
            python -m venv venv
            . venv/bin/activate
            pip install -r requirements.txt
      - run:
          name: Wait for DB
          command: |
            until pg_isready -h 127.0.0.1 -p 5432; do
              echo "Waiting for database..."
              sleep 1
            done
      - run:
          name: Run migrations
          command: |
            . venv/bin/activate
            python manage.py migrate
      - run:
          name: Run tests
          command: |
            . venv/bin/activate
            python manage.py test invoices
      - store_artifacts:
          path: test-reports
          destination: test-reports
      - store_test_results:
          path: test-reports
      - save_cache:
          key: v1-dependencies-{{ checksum "requirements.txt" }}
          paths:
            - ./venv

  deploy:
    docker:
      - image: cimg/python:3.10
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Install AWS CLI
          command: |
            sudo apt-get update
            sudo apt-get install -y awscli
      - run:
          name: Install Elastic Beanstalk CLI
          command: |
            pip install awsebcli
      - run:
          name: Build Docker image
          command: docker build -t invoice-management .
      - run:
          name: Deploy to AWS Elastic Beanstalk
          command: |
            # Configure AWS CLI
            aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
            aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
            aws configure set default.region $AWS_DEFAULT_REGION
            # Initialize Elastic Beanstalk application
            eb init -p docker invoice-management
            # Check if environment exists, create if not
            if eb status invoice-env; then
              echo "Environment exists"
            else
              eb create invoice-env
            fi
            # Deploy application
            eb deploy